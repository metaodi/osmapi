window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "osmapi", "modulename": "osmapi", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "osmapi.OsmApi", "modulename": "osmapi.OsmApi", "qualname": "", "type": "module", "doc": "<p>The OsmApi module is a wrapper for the OpenStreetMap API.\nAs such it provides an easy access to the functionality of the API.</p>\n\n<p>You can find this module <a href=\"https://pypi.python.org/pypi/osmapi\">on PyPI</a>\nor <a href=\"https://github.com/metaodi/osmapi\">on GitHub</a>.</p>\n\n<p>Find all information about changes of the different versions of this module\n<a href=\"https://github.com/metaodi/osmapi/blob/master/CHANGELOG.md\">in the CHANGELOG</a>.</p>\n\n<h2 id=\"notes\">Notes:</h2>\n\n<ul>\n<li><strong>dictionary keys</strong> are _unicode_</li>\n<li><strong>changeset</strong> is _integer_</li>\n<li><strong>version</strong> is _integer_</li>\n<li><strong>tag</strong> is a _dictionary_</li>\n<li><strong>timestamp</strong> is _unicode_</li>\n<li><strong>user</strong> is _unicode_</li>\n<li><strong>uid</strong> is _integer_</li>\n<li>node <strong>lat</strong> and <strong>lon</strong> are _floats_</li>\n<li>way <strong>nd</strong> is list of _integers_</li>\n<li>relation <strong>member</strong> is a _list of dictionaries_ like\n<code>{\"role\": \"\", \"ref\":123, \"type\": \"node\"}</code></li>\n</ul>\n"}, {"fullname": "osmapi.OsmApi.OsmApi", "modulename": "osmapi.OsmApi", "qualname": "OsmApi", "type": "class", "doc": "<p>Main class of osmapi, instanciate this class to use osmapi</p>\n"}, {"fullname": "osmapi.OsmApi.OsmApi.__init__", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.__init__", "type": "function", "doc": "<p>Initialized the OsmApi object.</p>\n\n<p>There are two different ways to authenticate a user.\nEither <code>username</code> and <code>password</code> are supplied directly or the path\nto a <code>passwordfile</code> is given, where on the first line username\nand password must be colon-separated (<user>:<pass>).</p>\n\n<p>To credit the application that supplies changes to OSM, an <code>appid</code>\ncan be provided.  This is a string identifying the application.\nIf this is omitted \"osmapi\" is used.</p>\n\n<p>It is possible to configure the URL to connect to using the <code>api</code>\nparameter.  By default this is the SSL version of the production API\nof OpenStreetMap, for testing purposes, one might prefer the official\ntest instance at \"api06.dev.openstreetmap.org\" or any other valid\nOSM-API. To use an encrypted connection (HTTPS) simply add 'https://'\nin front of the hostname of the <code>api</code> parameter (e.g.\nhttps://api.openstreetmap.com).</p>\n\n<p>There are several options to control the changeset behaviour. By\ndefault, a programmer has to take care to open and close a changeset\nprior to make changes to OSM.\nBy setting <code>changesetauto</code> to <code>True</code>, osmapi automatically opens\nchangesets.\nThe <code>changesetautotags</code> parameter takes a <code>dict</code>, where each key/value\npair is applied as tags to the changeset.\nThe option <code>changesetautosize</code> defines the size of each\nupload (default: 500) and <code>changesetautomulti</code> defines how many\nuploads should be made before closing a changeset and opening a new\none (default: 1).</p>\n\n<p>The <code>session</code> parameter can be used to provide a custom requests\nhttp session object (requests.Session). This might be useful for\nOAuth authentication, custom adapters, hooks etc.</p>\n\n<p>Finally the <code>timeout</code> parameter is used by the http session to\nthrow an expcetion if the the timeout (in seconds) has passed without\nan answer from the server.</p>\n", "parameters": ["self", "username", "password", "passwordfile", "appid", "created_by", "api", "changesetauto", "changesetautotags", "changesetautosize", "changesetautomulti", "session", "timeout"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.close", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.close", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.Capabilities", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.Capabilities", "type": "function", "doc": "<p>Returns the API capabilities as a dict:</p>\n\n<pre><code>#!python\n{\n    'area': {\n        'maximum': area in square degrees that can be queried,\n    },\n    'changesets': {\n        'maximum_elements': number of elements per changeset,\n    },\n    'status': {\n        'api': online|readonly|offline,\n        'database': online|readonly|offline,\n        'gpx': online|readonly|offline,\n    },\n    'timeout': {\n        'seconds': timeout in seconds for API calls,\n    },\n    'tracepoints': {\n        'per_page': maximum number of points in a GPX track,\n    },\n    'version': {\n        'maximum': maximum version of API this server supports,\n        'minimum': minimum version of API this server supports,\n    },\n    'waynodes': {\n        'maximum': maximum number of nodes that a way may contain,\n    },\n}\n</code></pre>\n\n<p>The capabilities can be used by a client to\ngain insights of the server in use.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NodeGet", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NodeGet", "type": "function", "doc": "<p>Returns node with <code>NodeId</code> as a dict:</p>\n\n<pre><code>#!python\n{\n    'id': id of node,\n    'lat': latitude of node,\n    'lon': longitude of node,\n    'tag': {},\n    'changeset': id of changeset of last change,\n    'version': version number of node,\n    'user': username of user that made the last change,\n    'uid': id of user that made the last change,\n    'timestamp': timestamp of last change,\n    'visible': True|False\n}\n</code></pre>\n\n<p>If <code>NodeVersion</code> is supplied, this specific version is returned,\notherwise the latest version is returned.</p>\n\n<p>If the requested element has been deleted,\n<code>OsmApi.ElementDeletedApiError</code> is raised.</p>\n\n<p>If the requested element can not be found,\n<code>OsmApi.ElementNotFoundApiError</code> is raised.</p>\n", "parameters": ["self", "NodeId", "NodeVersion"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NodeCreate", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NodeCreate", "type": "function", "doc": "<p>Creates a node based on the supplied <code>NodeData</code> dict:</p>\n\n<pre><code>#!python\n{\n    'lat': latitude of node,\n    'lon': longitude of node,\n    'tag': {},\n}\n</code></pre>\n\n<p>Returns updated <code>NodeData</code> (without timestamp):</p>\n\n<pre><code>#!python\n{\n    'id': id of node,\n    'lat': latitude of node,\n    'lon': longitude of node,\n    'tag': dict of tags,\n    'changeset': id of changeset of last change,\n    'version': version number of node,\n    'user': username of last change,\n    'uid': id of user of last change,\n    'visible': True|False\n}\n</code></pre>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If there is no open changeset,\n<code>OsmApi.NoChangesetOpenError</code> is raised.</p>\n\n<p>If the supplied information contain an existing node,\n<code>OsmApi.OsmTypeAlreadyExistsError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n", "parameters": ["self", "NodeData"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NodeUpdate", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NodeUpdate", "type": "function", "doc": "<p>Updates node with the supplied <code>NodeData</code> dict:</p>\n\n<pre><code>#!python\n{\n    'id': id of node,\n    'lat': latitude of node,\n    'lon': longitude of node,\n    'tag': {},\n    'version': version number of node,\n}\n</code></pre>\n\n<p>Returns updated <code>NodeData</code> (without timestamp):</p>\n\n<pre><code>#!python\n{\n    'id': id of node,\n    'lat': latitude of node,\n    'lon': longitude of node,\n    'tag': dict of tags,\n    'changeset': id of changeset of last change,\n    'version': version number of node,\n    'user': username of last change,\n    'uid': id of user of last change,\n    'visible': True|False\n}\n</code></pre>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If there is no open changeset,\n<code>OsmApi.NoChangesetOpenError</code> is raised.</p>\n\n<p>If there is already an open changeset,\n<code>OsmApi.ChangesetAlreadyOpenError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n", "parameters": ["self", "NodeData"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NodeDelete", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NodeDelete", "type": "function", "doc": "<p>Delete node with <code>NodeData</code>:</p>\n\n<pre><code>#!python\n{\n    'id': id of node,\n    'lat': latitude of node,\n    'lon': longitude of node,\n    'tag': dict of tags,\n    'version': version number of node,\n}\n</code></pre>\n\n<p>Returns updated <code>NodeData</code> (without timestamp):</p>\n\n<pre><code>#!python\n{\n    'id': id of node,\n    'lat': latitude of node,\n    'lon': longitude of node,\n    'tag': dict of tags,\n    'changeset': id of changeset of last change,\n    'version': version number of node,\n    'user': username of last change,\n    'uid': id of user of last change,\n    'visible': True|False\n}\n</code></pre>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If there is no open changeset,\n<code>OsmApi.NoChangesetOpenError</code> is raised.</p>\n\n<p>If there is already an open changeset,\n<code>OsmApi.ChangesetAlreadyOpenError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n\n<p>If the requested element has already been deleted,\n<code>OsmApi.ElementDeletedApiError</code> is raised.</p>\n\n<p>If the requested element can not be found,\n<code>OsmApi.ElementNotFoundApiError</code> is raised.</p>\n", "parameters": ["self", "NodeData"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NodeHistory", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NodeHistory", "type": "function", "doc": "<p>Returns dict with version as key:</p>\n\n<pre><code>#!python\n{\n    '1': dict of NodeData,\n    '2': dict of NodeData,\n    ...\n}\n</code></pre>\n\n<p><code>NodeId</code> is the unique identifier of a node.</p>\n", "parameters": ["self", "NodeId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NodeWays", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NodeWays", "type": "function", "doc": "<p>Returns a list of dicts of <code>WayData</code> containing node <code>NodeId</code>:</p>\n\n<pre><code>#!python\n[\n    {\n        'id': id of Way,\n        'nd': [] list of NodeIds in this way\n        'tag': {} dict of tags,\n        'changeset': id of changeset of last change,\n        'version': version number of Way,\n        'user': username of user that made the last change,\n        'uid': id of user that made the last change,\n        'visible': True|False\n    },\n    {\n        ...\n    },\n]\n</code></pre>\n\n<p>The <code>NodeId</code> is a unique identifier for a node.</p>\n", "parameters": ["self", "NodeId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NodeRelations", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NodeRelations", "type": "function", "doc": "<p>Returns a list of dicts of <code>RelationData</code> containing node <code>NodeId</code>:</p>\n\n<pre><code>#!python\n[\n    {\n        'id': id of Relation,\n        'member': [\n            {\n                'ref': ID of referenced element,\n                'role': optional description of role in relation\n                'type': node|way|relation\n            },\n            {\n                ...\n            }\n        ]\n        'tag': {},\n        'changeset': id of changeset of last change,\n        'version': version number of Way,\n        'user': username of user that made the last change,\n        'uid': id of user that made the last change,\n        'visible': True|False\n    },\n    {\n        ...\n    },\n]\n</code></pre>\n\n<p>The <code>NodeId</code> is a unique identifier for a node.</p>\n", "parameters": ["self", "NodeId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NodesGet", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NodesGet", "type": "function", "doc": "<p>Returns dict with the id of the Node as a key\nfor each node in <code>NodeIdList</code>:</p>\n\n<pre><code>#!python\n{\n    '1234': dict of NodeData,\n    '5678': dict of NodeData,\n    ...\n}\n</code></pre>\n\n<p><code>NodeIdList</code> is a list containing unique identifiers\nfor multiple nodes.</p>\n", "parameters": ["self", "NodeIdList"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.WayGet", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.WayGet", "type": "function", "doc": "<p>Returns way with <code>WayId</code> as a dict:</p>\n\n<pre><code>#!python\n{\n    'id': id of way,\n    'tag': {} tags of this way,\n    'nd': [] list of nodes belonging to this way\n    'changeset': id of changeset of last change,\n    'version': version number of way,\n    'user': username of user that made the last change,\n    'uid': id of user that made the last change,\n    'timestamp': timestamp of last change,\n    'visible': True|False\n}\n</code></pre>\n\n<p>If <code>WayVersion</code> is supplied, this specific version is returned,\notherwise the latest version is returned.</p>\n\n<p>If the requested element has been deleted,\n<code>OsmApi.ElementDeletedApiError</code> is raised.</p>\n\n<p>If the requested element can not be found,\n<code>OsmApi.ElementNotFoundApiError</code> is raised.</p>\n", "parameters": ["self", "WayId", "WayVersion"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.WayCreate", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.WayCreate", "type": "function", "doc": "<p>Creates a way based on the supplied <code>WayData</code> dict:</p>\n\n<pre><code>#!python\n{\n    'nd': [] list of nodes,\n    'tag': {} dict of tags,\n}\n</code></pre>\n\n<p>Returns updated <code>WayData</code> (without timestamp):</p>\n\n<pre><code>#!python\n{\n    'id': id of node,\n    'nd': [] list of nodes,\n    'tag': {} dict of tags,\n    'changeset': id of changeset of last change,\n    'version': version number of way,\n    'user': username of last change,\n    'uid': id of user of last change,\n    'visible': True|False\n}\n</code></pre>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If the supplied information contain an existing node,\n<code>OsmApi.OsmTypeAlreadyExistsError</code> is raised.</p>\n\n<p>If there is no open changeset,\n<code>OsmApi.NoChangesetOpenError</code> is raised.</p>\n\n<p>If there is already an open changeset,\n<code>OsmApi.ChangesetAlreadyOpenError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n", "parameters": ["self", "WayData"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.WayUpdate", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.WayUpdate", "type": "function", "doc": "<p>Updates way with the supplied <code>WayData</code> dict:</p>\n\n<pre><code>#!python\n{\n    'id': id of way,\n    'nd': [] list of nodes,\n    'tag': {},\n    'version': version number of way,\n}\n</code></pre>\n\n<p>Returns updated <code>WayData</code> (without timestamp):</p>\n\n<pre><code>#!python\n{\n    'id': id of node,\n    'nd': [] list of nodes,\n    'tag': {} dict of tags,\n    'changeset': id of changeset of last change,\n    'version': version number of way,\n    'user': username of last change,\n    'uid': id of user of last change,\n    'visible': True|False\n}\n</code></pre>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If there is no open changeset,\n<code>OsmApi.NoChangesetOpenError</code> is raised.</p>\n\n<p>If there is already an open changeset,\n<code>OsmApi.ChangesetAlreadyOpenError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n", "parameters": ["self", "WayData"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.WayDelete", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.WayDelete", "type": "function", "doc": "<p>Delete way with <code>WayData</code>:</p>\n\n<pre><code>#!python\n{\n    'id': id of way,\n    'nd': [] list of nodes,\n    'tag': dict of tags,\n    'version': version number of way,\n}\n</code></pre>\n\n<p>Returns updated <code>WayData</code> (without timestamp):</p>\n\n<pre><code>#!python\n{\n    'id': id of node,\n    'nd': [] list of nodes,\n    'tag': {} dict of tags,\n    'changeset': id of changeset of last change,\n    'version': version number of way,\n    'user': username of last change,\n    'uid': id of user of last change,\n    'visible': True|False\n}\n</code></pre>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If there is no open changeset,\n<code>OsmApi.NoChangesetOpenError</code> is raised.</p>\n\n<p>If there is already an open changeset,\n<code>OsmApi.ChangesetAlreadyOpenError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n\n<p>If the requested element has already been deleted,\n<code>OsmApi.ElementDeletedApiError</code> is raised.</p>\n\n<p>If the requested element can not be found,\n<code>OsmApi.ElementNotFoundApiError</code> is raised.</p>\n", "parameters": ["self", "WayData"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.WayHistory", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.WayHistory", "type": "function", "doc": "<p>Returns dict with version as key:</p>\n\n<pre><code>#!python\n{\n    '1': dict of WayData,\n    '2': dict of WayData,\n    ...\n}\n</code></pre>\n\n<p><code>WayId</code> is the unique identifier of a way.</p>\n", "parameters": ["self", "WayId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.WayRelations", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.WayRelations", "type": "function", "doc": "<p>Returns a list of dicts of <code>RelationData</code> containing way <code>WayId</code>:</p>\n\n<pre><code>#!python\n[\n    {\n        'id': id of Relation,\n        'member': [\n            {\n                'ref': ID of referenced element,\n                'role': optional description of role in relation\n                'type': node|way|relation\n            },\n            {\n                ...\n            }\n        ]\n        'tag': {} dict of tags,\n        'changeset': id of changeset of last change,\n        'version': version number of Way,\n        'user': username of user that made the last change,\n        'uid': id of user that made the last change,\n        'visible': True|False\n    },\n    {\n        ...\n    },\n]\n</code></pre>\n\n<p>The <code>WayId</code> is a unique identifier for a way.</p>\n", "parameters": ["self", "WayId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.WayFull", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.WayFull", "type": "function", "doc": "<p>Returns the full data for way <code>WayId</code> as list of dicts:</p>\n\n<pre><code>#!python\n[\n    {\n        'type': node|way|relation,\n        'data': {} data dict for node|way|relation\n    },\n    { ... }\n]\n</code></pre>\n\n<p>The <code>WayId</code> is a unique identifier for a way.</p>\n\n<p>If the requested element has been deleted,\n<code>OsmApi.ElementDeletedApiError</code> is raised.</p>\n\n<p>If the requested element can not be found,\n<code>OsmApi.ElementNotFoundApiError</code> is raised.</p>\n", "parameters": ["self", "WayId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.WaysGet", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.WaysGet", "type": "function", "doc": "<p>Returns dict with the id of the way as a key for\neach way in <code>WayIdList</code>:</p>\n\n<pre><code>#!python\n{\n    '1234': dict of WayData,\n    '5678': dict of WayData,\n    ...\n}\n</code></pre>\n\n<p><code>WayIdList</code> is a list containing unique identifiers for multiple ways.</p>\n", "parameters": ["self", "WayIdList"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.RelationGet", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.RelationGet", "type": "function", "doc": "<p>Returns relation with <code>RelationId</code> as a dict:</p>\n\n<pre><code>#!python\n{\n    'id': id of Relation,\n    'member': [\n        {\n            'ref': ID of referenced element,\n            'role': optional description of role in relation\n            'type': node|way|relation\n        },\n        {\n            ...\n        }\n    ]\n    'tag': {} dict of tags,\n    'changeset': id of changeset of last change,\n    'version': version number of Relation,\n    'user': username of user that made the last change,\n    'uid': id of user that made the last change,\n    'timestamp': timestamp of last change,\n    'visible': True|False\n}\n</code></pre>\n\n<p>If <code>RelationVersion</code> is supplied, this specific version is returned,\notherwise the latest version is returned.</p>\n\n<p>If the requested element has been deleted,\n<code>OsmApi.ElementDeletedApiError</code> is raised.</p>\n\n<p>If the requested element can not be found,\n<code>OsmApi.ElementNotFoundApiError</code> is raised.</p>\n", "parameters": ["self", "RelationId", "RelationVersion"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.RelationCreate", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.RelationCreate", "type": "function", "doc": "<p>Creates a relation based on the supplied <code>RelationData</code> dict:</p>\n\n<pre><code>#!python\n{\n    'member': [] list of members,\n    'tag': {} dict of tags,\n}\n</code></pre>\n\n<p>Returns updated <code>RelationData</code> (without timestamp):</p>\n\n<pre><code>#!python\n{\n    'id': id of Relation,\n    'member': [\n        {\n            'ref': ID of referenced element,\n            'role': optional description of role in relation\n            'type': node|way|relation\n        },\n        {\n            ...\n        }\n    ]\n    'tag': {} dict of tags,\n    'changeset': id of changeset of last change,\n    'version': version number of Relation,\n    'user': username of user that made the last change,\n    'uid': id of user that made the last change,\n    'visible': True|False\n}\n</code></pre>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If the supplied information contain an existing node,\n<code>OsmApi.OsmTypeAlreadyExistsError</code> is raised.</p>\n\n<p>If there is no open changeset,\n<code>OsmApi.NoChangesetOpenError</code> is raised.</p>\n\n<p>If there is already an open changeset,\n<code>OsmApi.ChangesetAlreadyOpenError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n", "parameters": ["self", "RelationData"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.RelationUpdate", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.RelationUpdate", "type": "function", "doc": "<p>Updates relation with the supplied <code>RelationData</code> dict:</p>\n\n<pre><code>#!python\n{\n    'id': id of relation,\n    'member': [] list of member dicts,\n    'tag': {},\n    'version': version number of relation,\n}\n</code></pre>\n\n<p>Returns updated <code>RelationData</code> (without timestamp):</p>\n\n<pre><code>#!python\n{\n    'id': id of Relation,\n    'member': [\n        {\n            'ref': ID of referenced element,\n            'role': optional description of role in relation\n            'type': node|way|relation\n        },\n        {\n            ...\n        }\n    ]\n    'tag': {} dict of tags\n    'changeset': id of changeset of last change,\n    'version': version number of Relation,\n    'user': username of user that made the last change,\n    'uid': id of user that made the last change,\n    'visible': True|False\n}\n</code></pre>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If there is no open changeset,\n<code>OsmApi.NoChangesetOpenError</code> is raised.</p>\n\n<p>If there is already an open changeset,\n<code>OsmApi.ChangesetAlreadyOpenError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n", "parameters": ["self", "RelationData"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.RelationDelete", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.RelationDelete", "type": "function", "doc": "<p>Delete relation with <code>RelationData</code> dict:</p>\n\n<pre><code>#!python\n{\n    'id': id of relation,\n    'member': [] list of member dicts,\n    'tag': {},\n    'version': version number of relation,\n}\n</code></pre>\n\n<p>Returns updated <code>RelationData</code> (without timestamp):</p>\n\n<pre><code>#!python\n{\n    'id': id of Relation,\n    'member': [\n        {\n            'ref': ID of referenced element,\n            'role': optional description of role in relation\n            'type': node|way|relation\n        },\n        {\n            ...\n        }\n    ]\n    'tag': {} dict of tags,\n    'changeset': id of changeset of last change,\n    'version': version number of Relation,\n    'user': username of user that made the last change,\n    'uid': id of user that made the last change,\n    'visible': True|False\n}\n</code></pre>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If there is no open changeset,\n<code>OsmApi.NoChangesetOpenError</code> is raised.</p>\n\n<p>If there is already an open changeset,\n<code>OsmApi.ChangesetAlreadyOpenError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n\n<p>If the requested element has already been deleted,\n<code>OsmApi.ElementDeletedApiError</code> is raised.</p>\n\n<p>If the requested element can not be found,\n<code>OsmApi.ElementNotFoundApiError</code> is raised.</p>\n", "parameters": ["self", "RelationData"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.RelationHistory", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.RelationHistory", "type": "function", "doc": "<p>Returns dict with version as key:</p>\n\n<pre><code>#!python\n{\n    '1': dict of RelationData,\n    '2': dict of RelationData,\n    ...\n}\n</code></pre>\n\n<p><code>RelationId</code> is the unique identifier of a relation.</p>\n", "parameters": ["self", "RelationId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.RelationRelations", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.RelationRelations", "type": "function", "doc": "<p>Returns a list of dicts of <code>RelationData</code>\ncontaining relation <code>RelationId</code>:</p>\n\n<pre><code>#!python\n[\n    {\n        'id': id of Relation,\n        'member': [\n            {\n                'ref': ID of referenced element,\n                'role': optional description of role in relation\n                'type': node|way|relation\n            },\n            {\n                ...\n            }\n        ]\n        'tag': {} dict of tags,\n        'changeset': id of changeset of last change,\n        'version': version number of Way,\n        'user': username of user that made the last change,\n        'uid': id of user that made the last change,\n        'visible': True|False\n    },\n    {\n        ...\n    },\n]\n</code></pre>\n\n<p>The <code>RelationId</code> is a unique identifier for a relation.</p>\n", "parameters": ["self", "RelationId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.RelationFullRecur", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.RelationFullRecur", "type": "function", "doc": "<p>Returns the full data (all levels) for relation\n<code>RelationId</code> as list of dicts:</p>\n\n<pre><code>#!python\n[\n    {\n        'type': node|way|relation,\n        'data': {} data dict for node|way|relation\n    },\n    { ... }\n]\n</code></pre>\n\n<p>The <code>RelationId</code> is a unique identifier for a way.</p>\n\n<p>This function is useful for relations containing other relations.</p>\n\n<p>If you don't need all levels, use <code>OsmApi.RelationFull</code>\ninstead, which return only 2 levels.</p>\n\n<p>If any relation (on any level) has been deleted,\n<code>OsmApi.ElementDeletedApiError</code> is raised.</p>\n\n<p>If the requested element can not be found,\n<code>OsmApi.ElementNotFoundApiError</code> is raised.</p>\n", "parameters": ["self", "RelationId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.RelationFull", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.RelationFull", "type": "function", "doc": "<p>Returns the full data (two levels) for relation\n<code>RelationId</code> as list of dicts:</p>\n\n<pre><code>#!python\n[\n    {\n        'type': node|way|relation,\n        'data': {} data dict for node|way|relation\n    },\n    { ... }\n]\n</code></pre>\n\n<p>The <code>RelationId</code> is a unique identifier for a way.</p>\n\n<p>If you need all levels, use <code>OsmApi.RelationFullRecur</code>.</p>\n\n<p>If the requested element has been deleted,\n<code>OsmApi.ElementDeletedApiError</code> is raised.</p>\n\n<p>If the requested element can not be found,\n<code>OsmApi.ElementNotFoundApiError</code> is raised.</p>\n", "parameters": ["self", "RelationId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.RelationsGet", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.RelationsGet", "type": "function", "doc": "<p>Returns dict with the id of the relation as a key\nfor each relation in <code>RelationIdList</code>:</p>\n\n<pre><code>#!python\n{\n    '1234': dict of RelationData,\n    '5678': dict of RelationData,\n    ...\n}\n</code></pre>\n\n<p><code>RelationIdList</code> is a list containing unique identifiers\nfor multiple relations.</p>\n", "parameters": ["self", "RelationIdList"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.Changeset", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.Changeset", "type": "function", "doc": "<p>Context manager for a Changeset.</p>\n\n<p>It opens a Changeset, uploads the changes and closes the changeset\nwhen used with the <code>with</code> statement:</p>\n\n<pre><code>#!python\nimport osmapi\n\nwith osmapi.Changeset({\"comment\": \"Import script XYZ\"}) as changeset_id:\n    print(f\"Part of changeset {changeset_id}\")\n    api.NodeCreate({\"lon\":1, \"lat\":1, \"tag\": {}})\n</code></pre>\n\n<p>If <code>ChangesetTags</code> are given, this tags are applied (key/value).</p>\n\n<p>Returns <code>ChangesetId</code></p>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If there is already an open changeset,\n<code>OsmApi.ChangesetAlreadyOpenError</code> is raised.</p>\n", "parameters": ["self", "ChangesetTags"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.ChangesetGet", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.ChangesetGet", "type": "function", "doc": "<p>Returns changeset with <code>ChangesetId</code> as a dict:</p>\n\n<pre><code>#!python\n{\n    'id': id of Changeset,\n    'open': True|False, wheter or not this changeset is open\n    'tag': {} dict of tags,\n    'created_at': timestamp of creation of this changeset\n    'closed_at': timestamp when changeset was closed\n    'comments_count': amount of comments\n    'discussion': [] list of comment dict (-&gt; `include_discussion`)\n    'max_lon': maximum longitude of changes in this changeset\n    'max_lat': maximum latitude of changes in this changeset\n    'min_lon': minimum longitude of changes in this changeset\n    'min_lat': minimum longitude of changes in this changeset\n    'user': username of user that created this changeset,\n    'uid': id of user that created this changeset,\n}\n</code></pre>\n\n<p><code>ChangesetId</code> is the unique identifier of a changeset.</p>\n\n<p>If <code>include_discussion</code> is set to <code>True</code> the changeset discussion\nwill be available in the result.</p>\n", "parameters": ["self", "ChangesetId", "include_discussion"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.ChangesetUpdate", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.ChangesetUpdate", "type": "function", "doc": "<p>Updates current changeset with <code>ChangesetTags</code>.</p>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If there is no open changeset,\n<code>OsmApi.NoChangesetOpenError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n", "parameters": ["self", "ChangesetTags"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.ChangesetCreate", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.ChangesetCreate", "type": "function", "doc": "<p>Opens a changeset.</p>\n\n<p>If <code>ChangesetTags</code> are given, this tags are applied (key/value).</p>\n\n<p>Returns <code>ChangesetId</code></p>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If there is already an open changeset,\n<code>OsmApi.ChangesetAlreadyOpenError</code> is raised.</p>\n", "parameters": ["self", "ChangesetTags"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.ChangesetClose", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.ChangesetClose", "type": "function", "doc": "<p>Closes current changeset.</p>\n\n<p>Returns <code>ChangesetId</code>.</p>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If there is no open changeset,\n<code>OsmApi.NoChangesetOpenError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.ChangesetUpload", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.ChangesetUpload", "type": "function", "doc": "<p>Upload data with the <code>ChangesData</code> list of dicts:</p>\n\n<pre><code>#!python\n{\n    type: node|way|relation,\n    action: create|delete|modify,\n    data: {}\n}\n</code></pre>\n\n<p>Returns list with updated ids.</p>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n", "parameters": ["self", "ChangesData"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.ChangesetDownload", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.ChangesetDownload", "type": "function", "doc": "<p>Download data from changeset <code>ChangesetId</code>.</p>\n\n<p>Returns list of dict:</p>\n\n<pre><code>#!python\n{\n    'type': node|way|relation,\n    'action': create|delete|modify,\n    'data': {}\n}\n</code></pre>\n", "parameters": ["self", "ChangesetId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.ChangesetsGet", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.ChangesetsGet", "type": "function", "doc": "<p>Returns a dict with the id of the changeset as key\nmatching all criteria:</p>\n\n<pre><code>#!python\n{\n    '1234': dict of ChangesetData,\n    '5678': dict of ChangesetData,\n    ...\n}\n</code></pre>\n\n<p>All parameters are optional.</p>\n", "parameters": ["self", "min_lon", "min_lat", "max_lon", "max_lat", "userid", "username", "closed_after", "created_before", "only_open", "only_closed"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.ChangesetComment", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.ChangesetComment", "type": "function", "doc": "<p>Adds a comment to the changeset <code>ChangesetId</code></p>\n\n<p><code>comment</code> should be a string.</p>\n\n<p>Returns the updated <code>ChangesetData</code> dict:</p>\n\n<pre><code>#!python\n{\n    'id': id of Changeset,\n    'open': True|False, wheter or not this changeset is open\n    'tag': {} dict of tags,\n    'created_at': timestamp of creation of this changeset\n    'closed_at': timestamp when changeset was closed\n    'comments_count': amount of comments\n    'max_lon': maximum longitude of changes in this changeset\n    'max_lat': maximum latitude of changes in this changeset\n    'min_lon': minimum longitude of changes in this changeset\n    'min_lat': minimum longitude of changes in this changeset\n    'user': username of user that created this changeset,\n    'uid': id of user that created this changeset,\n}\n</code></pre>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If the changeset is already closed,\n<code>OsmApi.ChangesetClosedApiError</code> is raised.</p>\n", "parameters": ["self", "ChangesetId", "comment"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.ChangesetSubscribe", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.ChangesetSubscribe", "type": "function", "doc": "<p>Subcribe to the changeset discussion of changeset <code>ChangesetId</code>.</p>\n\n<p>The user will be informed about new comments (i.e. receive an email).</p>\n\n<p>Returns the updated <code>ChangesetData</code> dict:</p>\n\n<pre><code>#!python\n{\n    'id': id of Changeset,\n    'open': True|False, wheter or not this changeset is open\n    'tag': {} dict of tags,\n    'created_at': timestamp of creation of this changeset\n    'closed_at': timestamp when changeset was closed\n    'comments_count': amount of comments\n    'max_lon': maximum longitude of changes in this changeset\n    'max_lat': maximum latitude of changes in this changeset\n    'min_lon': minimum longitude of changes in this changeset\n    'min_lat': minimum longitude of changes in this changeset\n    'user': username of user that created this changeset,\n    'uid': id of user that created this changeset,\n}\n</code></pre>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n", "parameters": ["self", "ChangesetId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.ChangesetUnsubscribe", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.ChangesetUnsubscribe", "type": "function", "doc": "<p>Subcribe to the changeset discussion of changeset <code>ChangesetId</code>.</p>\n\n<p>The user will be informed about new comments (i.e. receive an email).</p>\n\n<p>Returns the updated <code>ChangesetData</code> dict:</p>\n\n<pre><code>#!python\n{\n    'id': id of Changeset,\n    'open': True|False, wheter or not this changeset is open\n    'tag': {} dict of tags,\n    'created_at': timestamp of creation of this changeset\n    'closed_at': timestamp when changeset was closed\n    'comments_count': amount of comments\n    'max_lon': maximum longitude of changes in this changeset\n    'max_lat': maximum latitude of changes in this changeset\n    'min_lon': minimum longitude of changes in this changeset\n    'min_lat': minimum longitude of changes in this changeset\n    'user': username of user that created this changeset,\n    'uid': id of user that created this changeset,\n}\n</code></pre>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n", "parameters": ["self", "ChangesetId"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NotesGet", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NotesGet", "type": "function", "doc": "<p>Returns a list of dicts of notes in the specified bounding box:</p>\n\n<pre><code>#!python\n[\n    {\n        'id': integer,\n        'action': opened|commented|closed,\n        'status': open|closed\n        'date_created': creation date\n        'date_closed': closing data|None\n        'uid': User ID|None\n        'user': User name|None\n        'comments': {}\n    },\n    { ... }\n]\n</code></pre>\n\n<p>The limit parameter defines how many results should be returned.</p>\n\n<p>closed specifies the number of days a bug needs to be closed\nto no longer be returned.\nThe value 0 means only open bugs are returned,\n-1 means all bugs are returned.</p>\n\n<p>All parameters are optional.</p>\n", "parameters": ["self", "min_lon", "min_lat", "max_lon", "max_lat", "limit", "closed"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NoteGet", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NoteGet", "type": "function", "doc": "<p>Returns a note as dict:</p>\n\n<pre><code>#!python\n{\n    'id': integer,\n    'action': opened|commented|closed,\n    'status': open|closed\n    'date_created': creation date\n    'date_closed': closing data|None\n    'uid': User ID|None\n    'user': User name|None\n    'comments': {}\n}\n</code></pre>\n\n<p><code>id</code> is the unique identifier of the note.</p>\n", "parameters": ["self", "id"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NoteCreate", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NoteCreate", "type": "function", "doc": "<p>Creates a note based on the supplied <code>NoteData</code> dict:</p>\n\n<pre><code>#!python\n{\n    'lat': latitude of note,\n    'lon': longitude of note,\n    'text': text of the note,\n}\n</code></pre>\n\n<p>Returns updated <code>NoteData</code>:</p>\n\n<pre><code>#!python\n{\n    'id': id of note,\n    'lat': latitude of note,\n    'lon': longitude of note,\n    'date_created': date when the note was created\n    'date_closed': date when the note was closed or None if it's open,\n    'status': status of the note (open or closed),\n    'comments': [\n        {\n            'date': date of the comment,\n            'action': status of comment (opened, commented, closed),\n            'text': text of the note,\n            'html': html version of the text of the note,\n            'uid': user id of the user creating this note or None\n            'user': username of the user creating this note or None\n        }\n    ]\n}\n</code></pre>\n", "parameters": ["self", "NoteData"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NoteComment", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NoteComment", "type": "function", "doc": "<p>Adds a new comment to a note.</p>\n\n<p>Returns the updated note.</p>\n", "parameters": ["self", "NoteId", "comment"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NoteClose", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NoteClose", "type": "function", "doc": "<p>Closes a note.</p>\n\n<p>Returns the updated note.</p>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n", "parameters": ["self", "NoteId", "comment"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NoteReopen", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NoteReopen", "type": "function", "doc": "<p>Reopens a note.</p>\n\n<p>Returns the updated note.</p>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If the requested element has been deleted,\n<code>OsmApi.ElementDeletedApiError</code> is raised.</p>\n\n<p>If the requested element can not be found,\n<code>OsmApi.ElementNotFoundApiError</code> is raised.</p>\n", "parameters": ["self", "NoteId", "comment"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.NotesSearch", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.NotesSearch", "type": "function", "doc": "<p>Returns a list of dicts of notes that match the given search query.</p>\n\n<p>The limit parameter defines how many results should be returned.</p>\n\n<p>closed specifies the number of days a bug needs to be closed\nto no longer be returned.\nThe value 0 means only open bugs are returned,\n-1 means all bugs are returned.</p>\n", "parameters": ["self", "query", "limit", "closed"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.Map", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.Map", "type": "function", "doc": "<p>Download data in bounding box.</p>\n\n<p>Returns list of dict:</p>\n\n<pre><code>#!python\n{\n    type: node|way|relation,\n    data: {}\n}\n</code></pre>\n", "parameters": ["self", "min_lon", "min_lat", "max_lon", "max_lat"], "funcdef": "def"}, {"fullname": "osmapi.OsmApi.OsmApi.flush", "modulename": "osmapi.OsmApi", "qualname": "OsmApi.flush", "type": "function", "doc": "<p>Force the changes to be uploaded to OSM and the changeset to be closed</p>\n\n<p>If no authentication information are provided,\n<code>OsmApi.UsernamePasswordMissingError</code> is raised.</p>\n\n<p>If there is no open changeset,\n<code>OsmApi.NoChangesetOpenError</code> is raised.</p>\n\n<p>If there is already an open changeset,\n<code>OsmApi.ChangesetAlreadyOpenError</code> is raised.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "osmapi.dom", "modulename": "osmapi.dom", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "osmapi.dom.OsmResponseToDom", "modulename": "osmapi.dom", "qualname": "OsmResponseToDom", "type": "function", "doc": "<p>Returns the (sub-) DOM parsed from an OSM response</p>\n", "parameters": ["response", "tag", "single", "allow_empty"], "funcdef": "def"}, {"fullname": "osmapi.dom.DomParseNode", "modulename": "osmapi.dom", "qualname": "DomParseNode", "type": "function", "doc": "<p>Returns NodeData for the node.</p>\n", "parameters": ["DomElement"], "funcdef": "def"}, {"fullname": "osmapi.dom.DomParseWay", "modulename": "osmapi.dom", "qualname": "DomParseWay", "type": "function", "doc": "<p>Returns WayData for the way.</p>\n", "parameters": ["DomElement"], "funcdef": "def"}, {"fullname": "osmapi.dom.DomParseRelation", "modulename": "osmapi.dom", "qualname": "DomParseRelation", "type": "function", "doc": "<p>Returns RelationData for the relation.</p>\n", "parameters": ["DomElement"], "funcdef": "def"}, {"fullname": "osmapi.dom.DomParseChangeset", "modulename": "osmapi.dom", "qualname": "DomParseChangeset", "type": "function", "doc": "<p>Returns ChangesetData for the changeset.</p>\n", "parameters": ["DomElement", "include_discussion"], "funcdef": "def"}, {"fullname": "osmapi.dom.DomParseNote", "modulename": "osmapi.dom", "qualname": "DomParseNote", "type": "function", "doc": "<p>Returns NoteData for the note.</p>\n", "parameters": ["DomElement"], "funcdef": "def"}, {"fullname": "osmapi.errors", "modulename": "osmapi.errors", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "osmapi.errors.OsmApiError", "modulename": "osmapi.errors", "qualname": "OsmApiError", "type": "class", "doc": "<p>General OsmApi error class to provide a superclass for all other errors</p>\n"}, {"fullname": "osmapi.errors.MaximumRetryLimitReachedError", "modulename": "osmapi.errors", "qualname": "MaximumRetryLimitReachedError", "type": "class", "doc": "<p>Error when the maximum amount of retries is reached and we have to give up</p>\n"}, {"fullname": "osmapi.errors.UsernamePasswordMissingError", "modulename": "osmapi.errors", "qualname": "UsernamePasswordMissingError", "type": "class", "doc": "<p>Error when username or password is missing for an authenticated request</p>\n"}, {"fullname": "osmapi.errors.NoChangesetOpenError", "modulename": "osmapi.errors", "qualname": "NoChangesetOpenError", "type": "class", "doc": "<p>Error when an operation requires an open changeset, but currently\nno changeset _is_ open</p>\n"}, {"fullname": "osmapi.errors.ChangesetAlreadyOpenError", "modulename": "osmapi.errors", "qualname": "ChangesetAlreadyOpenError", "type": "class", "doc": "<p>Error when a user tries to open a changeset when there is already\nan open changeset</p>\n"}, {"fullname": "osmapi.errors.OsmTypeAlreadyExistsError", "modulename": "osmapi.errors", "qualname": "OsmTypeAlreadyExistsError", "type": "class", "doc": "<p>Error when a user tries to create an object that already exsits</p>\n"}, {"fullname": "osmapi.errors.XmlResponseInvalidError", "modulename": "osmapi.errors", "qualname": "XmlResponseInvalidError", "type": "class", "doc": "<p>Error if the XML response from the OpenStreetMap API is invalid</p>\n"}, {"fullname": "osmapi.errors.ApiError", "modulename": "osmapi.errors", "qualname": "ApiError", "type": "class", "doc": "<p>Error class, is thrown when an API request fails</p>\n"}, {"fullname": "osmapi.errors.ApiError.__init__", "modulename": "osmapi.errors", "qualname": "ApiError.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "status", "reason", "payload"], "funcdef": "def"}, {"fullname": "osmapi.errors.ApiError.status", "modulename": "osmapi.errors", "qualname": "ApiError.status", "type": "variable", "doc": "<p>HTTP error code</p>\n"}, {"fullname": "osmapi.errors.ApiError.reason", "modulename": "osmapi.errors", "qualname": "ApiError.reason", "type": "variable", "doc": "<p>Error message</p>\n"}, {"fullname": "osmapi.errors.ApiError.payload", "modulename": "osmapi.errors", "qualname": "ApiError.payload", "type": "variable", "doc": "<p>Payload of API when this error occured</p>\n"}, {"fullname": "osmapi.errors.UnauthorizedApiError", "modulename": "osmapi.errors", "qualname": "UnauthorizedApiError", "type": "class", "doc": "<p>Error when the API returned an Unauthorized error,\ne.g. when the provided OAuth token is expired</p>\n"}, {"fullname": "osmapi.errors.AlreadySubscribedApiError", "modulename": "osmapi.errors", "qualname": "AlreadySubscribedApiError", "type": "class", "doc": "<p>Error when a user tries to subscribe to a changeset\nthat she is already subscribed to</p>\n"}, {"fullname": "osmapi.errors.NotSubscribedApiError", "modulename": "osmapi.errors", "qualname": "NotSubscribedApiError", "type": "class", "doc": "<p>Error when user tries to unsubscribe from a changeset\nthat he is not subscribed to</p>\n"}, {"fullname": "osmapi.errors.ElementDeletedApiError", "modulename": "osmapi.errors", "qualname": "ElementDeletedApiError", "type": "class", "doc": "<p>Error when the requested element is deleted</p>\n"}, {"fullname": "osmapi.errors.ElementNotFoundApiError", "modulename": "osmapi.errors", "qualname": "ElementNotFoundApiError", "type": "class", "doc": "<p>Error if the the requested element was not found</p>\n"}, {"fullname": "osmapi.errors.ResponseEmptyApiError", "modulename": "osmapi.errors", "qualname": "ResponseEmptyApiError", "type": "class", "doc": "<p>Error when the response to the request is empty</p>\n"}, {"fullname": "osmapi.errors.ChangesetClosedApiError", "modulename": "osmapi.errors", "qualname": "ChangesetClosedApiError", "type": "class", "doc": "<p>Error if the the changeset in question has already been closed</p>\n"}, {"fullname": "osmapi.errors.NoteAlreadyClosedApiError", "modulename": "osmapi.errors", "qualname": "NoteAlreadyClosedApiError", "type": "class", "doc": "<p>Error if the the note in question has already been closed</p>\n"}, {"fullname": "osmapi.errors.VersionMismatchApiError", "modulename": "osmapi.errors", "qualname": "VersionMismatchApiError", "type": "class", "doc": "<p>Error if the provided version does not match the database version\nof the element</p>\n"}, {"fullname": "osmapi.errors.PreconditionFailedApiError", "modulename": "osmapi.errors", "qualname": "PreconditionFailedApiError", "type": "class", "doc": "<p>Error if the precondition of the operation was not met:</p>\n\n<ul>\n<li>When a way has nodes that do not exist or are not visible</li>\n<li>When a relation has elements that do not exist or are not visible</li>\n<li>When a node/way/relation is still used in a way/relation</li>\n</ul>\n"}, {"fullname": "osmapi.errors.TimeoutApiError", "modulename": "osmapi.errors", "qualname": "TimeoutApiError", "type": "class", "doc": "<p>Error if the http request ran into a timeout</p>\n"}, {"fullname": "osmapi.errors.ConnectionApiError", "modulename": "osmapi.errors", "qualname": "ConnectionApiError", "type": "class", "doc": "<p>Error if there was a network error (e.g. DNS failure, refused connection)\nwhile connecting to the remote server.</p>\n"}, {"fullname": "osmapi.http", "modulename": "osmapi.http", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "osmapi.http.OsmApiSession", "modulename": "osmapi.http", "qualname": "OsmApiSession", "type": "class", "doc": "<p></p>\n"}, {"fullname": "osmapi.http.OsmApiSession.__init__", "modulename": "osmapi.http", "qualname": "OsmApiSession.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "base_url", "created_by", "auth", "session", "timeout"], "funcdef": "def"}, {"fullname": "osmapi.http.OsmApiSession.MAX_RETRY_LIMIT", "modulename": "osmapi.http", "qualname": "OsmApiSession.MAX_RETRY_LIMIT", "type": "variable", "doc": "<p>Maximum retries if a call to the remote API fails (default: 5)</p>\n"}, {"fullname": "osmapi.http.OsmApiSession.close", "modulename": "osmapi.http", "qualname": "OsmApiSession.close", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "osmapi.parser", "modulename": "osmapi.parser", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "osmapi.parser.ParseOsm", "modulename": "osmapi.parser", "qualname": "ParseOsm", "type": "function", "doc": "<p>Parse osm data.</p>\n\n<p>Returns list of dict:</p>\n\n<pre><code>#!python\n{\n    type: node|way|relation,\n    data: {}\n}\n</code></pre>\n", "parameters": ["data"], "funcdef": "def"}, {"fullname": "osmapi.parser.ParseOsc", "modulename": "osmapi.parser", "qualname": "ParseOsc", "type": "function", "doc": "<p>Parse osc data.</p>\n\n<p>Returns list of dict:</p>\n\n<pre><code>#!python\n{\n    type: node|way|relation,\n    action: create|delete|modify,\n    data: {}\n}\n</code></pre>\n", "parameters": ["data"], "funcdef": "def"}, {"fullname": "osmapi.parser.ParseNotes", "modulename": "osmapi.parser", "qualname": "ParseNotes", "type": "function", "doc": "<p>Parse notes data.</p>\n\n<p>Returns a list of dict:</p>\n\n<pre><code>#!python\n[\n    {\n        'id': integer,\n        'action': opened|commented|closed,\n        'status': open|closed\n        'date_created': creation date\n        'date_closed': closing data|None\n        'uid': User ID|None\n        'user': User name|None\n        'comments': {}\n    },\n    { ... }\n]\n</code></pre>\n", "parameters": ["data"], "funcdef": "def"}, {"fullname": "osmapi.xmlbuilder", "modulename": "osmapi.xmlbuilder", "qualname": "", "type": "module", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.addField("qualname");
            this.addField("fullname");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();